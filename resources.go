// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// ids.png
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _idsPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\xce\xf9\x37\x14\xfe\xa3\x06\xf0\xf7\xcc\x58\x27\xcb\x08\x29\x31\x8d\x1a\xb2\x54\x8c\x7d\x37\xc6\x64\x8b\x3e\xb6\xb2\xa7\xec\x4b\x65\xdf\xc5\xf8\x98\x8c\x25\x1a\x94\x25\x4b\x61\x64\x57\x76\xb2\x94\x90\x6d\xac\x51\xc4\xd8\x42\x06\x21\x7b\x28\xf7\x7c\xff\x81\x7b\xce\x3d\xf7\x97\x7b\x7f\x78\xce\x79\xfd\xf0\x9c\xe7\x3c\xb1\x46\x37\x75\xd8\xe1\xfc\x70\x00\x00\xbb\x9e\x2e\xde\x04\x00\xd0\xfd\x9f\xb0\x30\x01\x00\xca\x2d\x2a\x72\x00\x00\x10\x5f\x13\x1d\x1c\xa8\x18\x10\xa0\x03\xc0\x8d\xd7\xc3\x6b\x9a\x05\xdd\xf9\x99\x6d\x9d\x3c\x55\xc7\x1b\x3d\xec\xb0\xd1\x9e\xff\x5c\xd7\x4a\x4f\xd5\x33\x51\x3c\x94\x5c\xc3\x9c\x96\xa5\x70\x43\x62\xd8\x55\xd8\x6d\xa3\x3d\x67\x80\x50\xaf\x9d\xc2\xe0\xf5\xd0\x95\xb0\x30\x73\xab\xa2\x03\x39\xbf\x77\x21\x4c\x91\x19\xc5\x92\x25\x10\x6e\x04\xe0\x78\x5e\x45\xcd\xf3\xa2\x80\x71\x1e\x0e\x10\x3b\x1c\xa2\x64\x23\x40\x78\x15\x8a\x85\x80\x7f\xd5\x01\xa3\x23\xfc\x43\x54\xb7\x9f\x56\x49\x94\x28\xc0\x72\xd8\xbb\xca\x9a\xbe\x06\x20\x89\x1e\x6d\xc6\x6c\x0c\x08\x02\x1d\x43\xae\xaf\x0d\x20\xe0\xe2\x67\xf6\x62\x8e\x3c\x00\x94\x62\x72\x87\x0d\x32\xa0\x00\xff\xfa\xbc\x89\x20\x1e\x02\x7c\x10\x5a\xf9\x19\xd2\x8c\x20\xc6\x40\x81\xa2\x1c\x03\x05\x0b\xa8\x68\x6d\x19\x27\x38\x40\x64\x3c\xd4\xf5\x47\x30\x82\x6e\x4d\xb6\x04\xe7\x5e\x1e\x80\x92\xa6\x91\x57\x50\x70\x40\x8e\x3a\xcb\xdf\xff\x4c\x0c\x60\x1d\xdf\x09\x8d\x69\xf2\x00\x14\x33\x46\xf6\x85\x98\x29\x20\xfc\x0f\x0e\xc8\xf5\x37\x1f\x77\xb5\xa8\xfc\x59\xcf\x91\x0b\xbe\x2f\x77\x15\x4c\x94\x2c\xc2\x47\x8f\xb6\xda\xfe\x28\x3b\x1e\x05\x1c\xcc\x04\x0e\x34\x76\x7d\x8d\x68\xcd\x69\x6d\x28\x84\x5e\x97\x7f\x29\x0c\xdc\xa6\xf1\x75\xbc\xcd\xc7\x4b\x48\x5a\xd4\xb6\xe0\xcc\x89\x2a\xcb\xf7\x93\x7d\x54\x47\x38\xe8\xf8\xc2\xd6\x5d\x5e\x07\x55\xbf\xe2\x23\x49\x5b\x3e\xe9\x9b\x65\xd4\xf6\x44\x15\xf3\x83\xa4\xa2\x68\xd9\x5d\xde\x06\xd6\xf8\x6b\xeb\xc3\xd9\xca\xa2\x26\xd3\x58\x13\x37\x70\xd1\x98\xdd\x6d\x3d\x9f\x50\xa9\x40\x36\xe3\x27\xe8\x9a\x69\xf1\x5b\x33\x42\x11\x4b\x29\x8e\x93\xff\x1e\x34\x42\x10\xad\xce\xba\x42\xc6\x58\x45\xbd\x54\x1e\xa7\x0c\x26\x82\x45\x49\x6c\x73\x96\x07\xea\x4a\x95\x2c\x0c\x54\x9a\x6d\xeb\x06\x33\x22\xe7\xca\x25\x14\xf4\x2a\xae\x8a\x81\xe2\x07\x91\xe5\xa9\x1a\x41\x71\x1b\xd6\xe5\x1a\x95\xd3\x80\x28\xca\x83\xcc\x14\x03\xd8\x3d\x9a\xf0\xa6\x88\xad\x9b\x1d\xc8\xe3\x79\xfb\x6b\x01\xe0\xdd\x50\xff\xf7\x44\x82\x76\x44\x20\x43\x0f\xdf\xa8\x58\x7f\x73\x24\x11\xb2\x68\x9d\xd9\x34\xb7\x91\x9e\xd5\x5d\xf3\xc2\x89\x28\x95\xa6\xf7\x47\x27\x0f\xcb\xf3\x0b\x0c\xaf\x6c\x2b\xb3\xa1\xd2\x22\x9a\x36\x68\xb9\xee\x92\xeb\x2d\x05\xde\x0a\x6c\xdd\xe6\x3f\xa6\x9e\x56\xc8\xb4\xec\x30\x9b\x76\xf9\xc5\xd6\x60\x18\xe8\x6b\xc8\x29\x4e\xce\xa7\x05\x75\xa9\x82\xb6\x2f\xbe\x0a\x81\x73\xb3\x67\x07\x5f\xa9\x59\xe3\xaa\x30\x58\x65\xd1\x9b\x76\x59\x27\x76\x5b\x4f\xc7\x3e\xc5\x87\x06\x68\x34\x0e\x86\x46\x3a\xed\x13\xa8\xb3\x67\x55\x1e\x9f\x43\x97\x0d\x68\xad\x27\xbf\xe6\x0c\xf7\xe7\x5c\xcf\x5c\x3a\x84\x7a\x9f\x0f\x04\x7d\x15\x90\xc6\x30\xaf\x08\x65\x05\x41\xba\xc6\x86\xbf\x08\x39\x46\xe5\xa9\x18\xac\x9a\x1a\x9d\x58\x1c\x79\x91\x3a\x4c\x49\x68\xbd\xc9\xb7\x5f\x53\x8b\xb8\x3f\x43\xd8\xb9\x9c\x15\xaa\x6b\x4f\x52\x2a\x15\xc2\xd0\x55\x03\xde\x1e\xb0\xee\xb8\x3c\x64\x79\x2e\x31\xdd\x90\xf0\x72\x2a\xfe\xa8\x8e\xd7\x28\x80\x3d\x46\xe1\xd8\xeb\x6d\xa6\x46\x7d\x09\x0b\xfa\x53\xf6\xe5\xaf\xe6\xa6\x11\x11\x55\x4c\x0e\x57\xee\x0f\x6d\x46\xbc\xe8\xed\x1f\x09\x40\x1d\x75\x46\x7e\xd1\x9c\x50\x43\xa5\x24\x9d\x7a\x6c\xcd\x0e\xb6\xe8\x3b\x9d\x8f\xe4\xd7\x9a\xe3\xcb\xe0\x60\x24\xed\x9e\x00\x3c\x75\xe8\x95\x22\xaa\x5d\x95\x60\xbb\x3f\xfa\xdc\x2e\x8d\x73\x3d\x7f\x93\xe3\xc9\xa8\xb0\x74\x9e\x57\x29\x3f\x2a\xf0\x09\x3d\x1e\x22\x9d\x70\xe7\xe7\xc0\x3f\xeb\x90\xee\xc7\x86\x24\xbb\x94\x93\xf9\x3c\xff\xa6\x30\xaf\x69\x9a\xb5\xdd\xe9\xef\xa5\x3d\xd1\x14\x38\x8a\x6f\x3f\xec\xb0\xbd\x25\x6d\x99\xff\x06\xb7\x4d\x87\xcc\xb4\xee\xa2\xce\x41\x57\x65\x56\x6e\xf6\xf7\x84\x5b\x7f\x3d\x37\x9e\x48\xae\xde\xf3\xf0\x9c\xf8\x6b\x71\x07\x38\x16\xb3\xf5\x19\xf1\x02\x0c\x6b\x71\x74\xc8\x89\x47\x43\xbe\x94\xf2\x38\x85\xa9\xe4\x9a\xfe\x0a\x1f\x2e\x4c\xfd\x3b\xe3\xab\x77\xe1\x47\xb3\xd3\xd6\xe5\xad\x74\xf1\x91\x42\x26\xd4\xaa\x78\xb2\x50\xa3\x04\x4a\x3b\x9b\xc4\x2d\xbd\x08\x58\x97\x82\xf2\xcd\x2f\xd4\x6f\xb9\xaa\x86\x55\x32\x32\x5f\x93\x05\x68\x68\x37\x3d\x3e\x54\x8b\x6b\xfb\x26\xe1\xa0\x5c\xe0\x9f\x91\x24\xff\xf4\xea\x3f\xca\x75\x6e\x07\xfb\xff\x3c\xdb\xc3\x80\x5f\xdb\x1f\x31\x83\x85\x0f\x67\x6e\x87\xc4\xaa\x99\x37\xc7\x16\x52\x79\x93\x8f\x54\x80\x25\x6b\x65\x91\x17\x83\x90\x76\xe3\x2a\x27\xcf\x76\xc2\x39\x16\x5a\x11\xf5\x17\xd2\x36\x26\x29\xfd\xd4\x40\x41\xe6\x52\xb4\x66\x36\x09\x82\xde\xbd\x26\x3e\xa6\x53\xfa\x5e\x06\x82\xaa\x5f\x52\xf2\x9d\x6d\x80\xa1\xd6\x0e\xfd\xfc\x57\xcc\x7f\xe3\x38\x31\x8b\xed\xbf\x90\x50\x6c\xc5\x62\x6b\x83\xc2\x9c\x4a\xe2\x3d\x2e\x6c\xd5\xa1\xc5\x58\xca\x14\x0c\x21\x09\x3f\x4a\xb3\x9a\xbc\xf0\x84\x3a\xe0\xfb\xc5\x6d\x89\xee\x94\x5d\xf9\x92\x92\xfa\x0b\xf5\xaf\x92\x8e\xe3\xc6\xc4\x68\xcf\x9d\x5a\x87\x72\xf1\x2a\xd5\x6e\xcf\xf5\x61\x35\x3f\xab\x83\xdf\x5d\xf3\x23\x82\x1f\x6f\x4c\xa6\x1b\x96\x6a\x9a\x08\x20\xf4\x24\xaf\x25\x89\x8c\x78\x7f\xca\xc3\x7b\xf1\xec\xa2\x0c\x14\xdf\x19\x2d\x5d\xd8\x1f\xce\x9e\x6a\xf0\x08\x4e\xf6\x5e\x5b\xb0\xd9\x68\xdb\x45\x45\xed\xbf\x5b\x8f\xc8\x0c\x4e\xaa\xc4\x65\xa8\xf9\xac\x2e\xb9\xac\xdc\x1b\x23\x05\x70\xea\x2a\xb8\x67\x4f\xbd\xf4\x10\x74\x41\x18\xb3\xe9\x68\x62\x2d\x2e\x39\x3b\xe7\xce\xae\xa8\x1d\x7a\xda\x9f\x01\x05\xca\xdc\x5d\x51\x65\xcb\x5c\xb6\x09\xfc\x7c\x1c\x16\x1b\xd5\x17\x3f\x58\xb6\xbd\x4d\x1d\xac\x80\x08\x95\x49\x15\xcf\x8a\x32\xb0\xac\xaa\x7f\x58\x73\x55\x7d\xd2\x3c\xd5\xf3\x7b\xdc\xb2\x81\xc0\x76\x87\x62\xb7\xd5\x7f\x45\x8a\x45\x64\x73\x61\x31\x50\xc2\x75\x8f\x5d\xf7\x30\xa1\x89\x9f\xc3\x17\x9b\x2e\x71\x9b\x48\xd6\x53\x55\x32\x87\x26\xb3\x57\xbf\xf6\x5a\x0d\x98\xc6\xd1\xbf\x5e\xd9\xd0\xef\x91\xa2\x6b\xd6\x9e\xab\xc9\x51\xaf\xba\xda\xc9\xc0\xe1\x81\x55\xcc\xdf\x7d\x2b\xbe\xa0\x62\xbf\x52\x08\x7f\x83\xf6\x25\xb7\x45\x1d\xd4\xaf\x38\xd0\xaa\x24\xff\x30\x48\xd8\x04\x46\x39\x7e\x45\xa2\xd3\x79\xa2\x43\xeb\xa9\xb3\x52\x4c\xc4\xfb\x7e\xb8\x65\x45\xf9\x96\x3e\x53\xfe\x3b\x7a\x90\x39\xa2\x65\x64\xc2\xb1\x7b\x21\x73\xfc\x1e\xd3\xdf\x9b\xdb\x49\x5a\xe0\xf4\x59\xea\xfb\x83\x8b\x2d\x42\x85\x21\xda\xda\x2e\x86\x4e\x7a\xd1\xa9\xa6\x39\xce\xbb\xfa\xdc\xf6\xec\x21\x29\xed\x65\xe7\xd0\x14\x85\xe3\x37\x6e\xdd\x30\xf8\x58\xaa\xc7\xa0\x20\x13\x22\x41\xb7\xb8\x26\x8b\x23\xb3\x9b\xe4\x78\xff\xf5\x65\xa3\x41\x8d\x67\xc8\x05\x7e\x67\x4c\xaa\x2b\xeb\x76\x49\xe9\x93\xc0\xcd\x8b\x00\xaf\x97\x08\x41\xf9\x6d\xb4\x59\xbf\xe6\x7d\x2f\xc0\x26\x3c\x47\x8d\xff\xe8\x27\x63\xab\x0b\xc3\xa2\xd1\x22\xfd\x95\xcf\x9c\x9f\x88\x30\xa3\xf4\x9d\xc6\x08\x08\x1d\xf3\x79\x8a\xea\xfd\x04\xd7\x8d\x31\x1b\x0e\x31\x54\x72\x70\x37\x03\x8b\x4b\x20\xee\x9e\x24\x14\xbb\x02\xc5\x6d\x21\xa9\x43\x25\x1e\x49\x9d\xc7\x5a\xdc\xf6\xfe\x04\x06\xe4\xd3\x53\xfc\x97\x46\xed\x83\x2f\x57\x34\x42\x58\xcc\x2b\x27\xb6\xc5\x39\x71\x02\x7f\xa4\x27\x1d\xbf\x58\xdd\x95\x3e\x31\x82\x9d\x7e\xf8\x02\x5d\xb7\x2b\x62\x90\x1f\xae\x24\xde\x9d\xe9\x1e\x00\x70\xb7\xc4\xb7\xb2\xa0\x88\xe4\xfd\x65\x6d\xfb\x0b\x3e\x5e\xe1\x6d\x5c\xaf\xd6\x6a\xaa\x7d\x3e\x79\x1a\xe1\x7f\x00\x9b\x77\x0f\xd4\x1d\x68\x7f\xdc\x12\xa7\x7c\x93\x8a\xfb\x5a\xcb\x68\xcc\x02\x62\x10\x16\x9d\xf2\xe7\x2e\xbc\x04\x1e\x76\xf6\x67\xfd\x56\x68\xc9\x20\x0e\x42\x6b\x09\x55\x90\x25\x0b\x0a\x61\xd1\xb9\x7a\x03\xcb\x72\xaf\x4d\x0a\xb3\x4f\x12\x7d\x1b\xfe\xbd\x10\xda\x3e\xd5\x19\x21\x79\xed\xaf\x61\xf0\x23\x44\x84\xaf\x7a\x38\x6c\xe4\xe5\x63\xe1\xa3\xc5\xf7\x97\x84\x96\xc5\xc4\x42\xea\x09\x06\x97\x42\x85\xe6\xb4\x2b\x1f\x23\xd1\xe7\xef\xe8\x89\x2c\x39\x64\xbf\x66\x55\x76\x91\x13\x1d\x09\x6d\x48\x59\x0d\x96\x57\xd8\xbe\x9c\x7b\xb5\xea\xbc\xf4\x11\xae\xda\xda\x0a\x74\xbf\xfa\x90\xf7\x19\xce\xae\xc5\x65\xc6\xa2\x2b\xdf\x6c\x5f\x36\x4f\x2d\x75\x93\xd7\xdc\x3f\x57\x0a\x61\xe5\x5c\xe3\xfe\x16\x59\xd3\x61\x2b\x4a\xfd\x96\xcd\x1c\x1b\x60\x91\xeb\xed\x43\x8e\x01\x42\xcd\x47\xa8\xc4\x17\x7d\x2b\x8f\x67\xa2\x24\x35\x5a\xfa\xe5\x5c\x7e\x05\x9a\x62\x59\x7e\x26\xde\x22\xcb\x32\x8b\xdf\xfd\x6e\x0b\x49\xfe\x59\xc6\xc8\x40\x4d\x6d\xac\x09\x1a\xde\x14\x3f\x1e\xbd\xc5\x66\x69\xe4\x02\xc3\x5a\xa8\x84\x72\x13\x28\x37\x57\x2e\xa4\x64\x90\x2c\x8f\xa0\xc4\xad\x07\x91\x18\x34\x14\xab\x1f\x6d\xde\x9a\x5f\x54\xdf\x40\xca\x1e\x3d\x4b\xbe\x3f\xc9\x4d\x20\xbe\xea\x44\xca\xd8\xad\xd3\x78\x51\x77\xe4\x46\xda\x40\x34\x99\x07\x4a\x94\xb6\xfa\xa4\x1c\xdb\x83\x2c\xfb\x4d\x7c\x29\x98\x59\x3e\xc8\x7c\x4b\x30\x1d\xe1\xec\xd4\x22\x53\x2f\xd8\x04\x5b\x98\x26\xbf\x85\x08\x75\xcc\x4d\xa5\xe8\x38\x6b\xbf\xfc\xc8\xe6\xa4\x6e\x5b\xe7\xce\x39\x12\xba\xfb\x77\x85\x61\x11\xff\xa2\x2a\x1f\x6b\x3d\xa3\x84\x6d\x62\x70\xbc\xef\x18\xd0\x81\xd9\x44\x7f\x21\xb8\xa6\x06\x36\x05\x48\xbc\xd7\xb4\xf3\x43\x7c\x6a\xf3\xf6\xc8\xdf\x36\x0c\xad\x21\x50\xde\xbc\x5d\x8e\x57\x78\x4b\x37\x8c\xe9\xf1\x57\xb2\x0e\x6d\x95\x45\xdb\x60\x7d\x2e\x4d\x4d\x03\xba\x40\x57\xd0\x99\x34\x24\xf9\x77\x64\x50\xdf\x3a\x0b\xf6\x20\xc6\xd9\xdc\x97\x27\xef\x05\x6c\xe4\x7d\xe5\xc0\x23\x0f\x24\x5f\x2e\x86\xd3\x07\x16\xe3\x5b\xa2\x04\xa5\x3f\x62\x11\x22\x2e\xee\xbc\xb2\x25\x59\xe4\x22\x0a\x50\xf7\xa0\xc9\x3f\x51\x71\x7c\x44\x05\xa1\xe8\x6f\xdc\xec\xf3\x8b\xaa\xc8\x82\x6a\xc6\x3b\xaa\x93\x7f\xcd\xc2\xf1\xe5\x86\x69\x21\x9c\xb0\x6e\xa9\xe4\x02\x73\x12\x43\x0e\xd1\xb5\x66\x7a\x9d\x88\x68\x67\x43\x44\x3d\x10\x39\x93\xb2\xa3\xb9\x4f\x1f\x62\x63\xf7\xc2\x2f\x4f\xc2\x28\xa5\x41\x0b\x69\xef\x28\x98\x5a\x5e\x15\xff\xd1\x88\x92\xe6\xb5\x98\xbd\x21\xc1\x35\x81\xa6\xb5\xc7\x8f\xa4\xce\x9d\x22\x3f\xdf\x76\xff\xb1\x5b\x50\x36\x4a\xf9\xe6\xda\xc8\x59\x2a\x87\x5d\x7a\x7b\xdd\xcf\xe8\xaa\xf0\xe0\xb6\x59\x28\xd9\x80\x39\xf6\xb6\xbc\x02\x7f\x87\x36\xbf\x33\x89\xba\x55\xb5\x05\x4e\x9d\x76\x7e\x54\x25\xd9\x5b\xd6\x3a\xb3\xac\x6c\x6a\x3f\x9b\x07\x97\xe1\xf0\x82\x35\xd4\x5c\x0a\x4e\xcd\x20\xd1\x1b\x66\x88\x54\xdf\xbe\x31\x08\x81\x47\xc5\xf0\x8f\x3b\x5c\x1a\x6d\x80\x35\x48\xd0\xf9\xb9\x70\x66\xd0\xc9\x1c\x76\x15\x5e\xd9\xd3\x6e\xe6\x10\x44\x6e\x30\xd6\x25\x5b\xc0\xa4\xaf\x88\x6c\xb6\xa2\xd8\x26\x37\xe7\xa7\x8f\x8c\x23\x8a\xd2\xc2\xe4\xd6\x94\xf5\x36\x06\xb8\x4c\x83\xf3\x37\x37\x37\xf9\x16\x1b\x1d\xbf\xae\xf2\xda\xa7\xf6\x85\xb8\x71\x90\x00\xba\xfc\x76\x80\xac\x3d\x04\x97\x49\xf1\xa8\xcb\x30\x90\xec\xb5\xd8\xd5\x77\x7d\x95\x61\xf6\x74\xc2\xaa\xdc\x9e\xdd\x97\x3c\xf5\x47\x04\x2c\x70\x08\x9d\x71\xeb\x2c\x96\x39\xeb\x59\x2b\xda\x44\xd5\xb3\x5a\xfd\x47\x53\xad\xac\x63\x71\x29\x68\xd4\xb8\x46\x18\x1b\xf3\xc0\xdd\x83\xd7\x83\x94\xe2\x27\x2d\x00\xc5\x56\x85\x66\x8e\x12\x18\x24\x7b\xad\xc6\xe3\xe5\xce\xef\x56\xc3\xf0\x70\x9b\x91\xbb\xa3\xdf\xe2\x3f\x46\xae\x8c\xcb\x79\x68\x1c\x77\x26\x55\x6a\x17\x56\x98\xc4\xdb\xb6\xa5\x8a\x49\x6a\x48\x4d\xe7\xd4\x54\x86\xe5\x20\x98\x1e\xc7\xea\x6a\x37\x65\x5f\x9a\x9a\xa2\x29\xbc\x01\x2a\xef\x9d\x4e\x7d\xec\x8f\x9b\xcb\xa5\x05\x3f\xb8\x9d\x23\xb5\x85\x72\xb0\xa0\xc0\x88\x5b\x90\xf4\x59\xdb\xdb\xfa\x67\x77\x05\xf0\x94\x90\x02\xfc\xc4\x40\x17\x51\x6b\x5e\x53\x34\x93\xfe\xec\x52\x44\x13\x81\x65\xa7\xe5\xdc\x13\x16\x82\x05\x10\x4c\x0d\x3e\x8b\xd5\xff\x20\x04\x25\x22\xa0\xa2\x69\x66\x93\x87\x77\xe1\x93\x34\x89\x46\x98\x76\x65\xc1\x2c\x02\x82\x53\x7c\x74\xa9\xc9\xf3\x49\xc3\xd6\xeb\x47\x12\x1b\xf1\xc3\x89\xdd\xd5\xb1\xfe\x01\xb7\xa4\x94\x98\x7b\x66\x86\x4a\xe1\x73\x5f\x7a\xa7\x5b\x98\xc5\x58\x49\x08\xf2\x9a\x34\xc5\x27\x4f\xdd\x1f\x27\xec\x6a\x1b\x61\x0c\xf3\x69\xea\x4d\x7b\x10\xea\xd7\xca\x1f\x92\xa7\x78\x7d\xfe\xd8\xc1\x72\x9d\x9f\x3c\xe2\x15\x03\x84\x3e\xcd\xcd\x4b\xad\xee\x99\x71\xd3\x54\x78\x4f\x61\x1f\xd6\x6f\xc4\xab\x48\x79\x73\x17\x2a\x9e\xb4\x43\x7c\x38\x15\xf1\x84\x03\x3c\xf1\xf9\x99\x5f\xcb\x33\xd3\x95\x1a\x5f\x9f\x66\xb1\x6c\xbf\x29\x62\xee\x21\x99\xbb\x7b\x06\xa6\x23\x24\xce\xe7\x21\x74\xbc\x7b\x65\x2f\x9f\x9a\x0f\x11\x99\x48\xba\x36\x19\x1d\xb4\xf8\x31\xea\xbb\xdf\x05\xbb\x89\x20\x72\x29\x1f\x37\x14\x17\xa6\xe9\xaa\x7e\xb2\x8c\x33\xd0\xbf\x3c\x3e\x22\x33\x91\xe8\xc4\x42\x1a\x8f\x42\xac\xa2\xd8\xab\xaf\xd4\x37\x97\xfe\x40\xc5\xa9\xe0\x3e\x85\x9b\x4b\x34\x7f\x13\x44\x4d\x0c\x67\x8d\x63\x94\x60\xb8\x3a\xaa\x85\x73\x8d\xd4\xea\xf7\x55\x9d\xdb\x6b\x09\xf1\x85\x1a\x53\x47\xac\xd3\x11\xef\x36\xec\x3a\xde\x8b\x49\x6a\xe8\xfd\xcd\x08\x82\x3d\xb0\xf8\x16\x7f\xa4\x7e\xbc\x3a\xa1\xd6\x70\xd9\xf8\x7a\x45\x70\x47\x0a\xf7\xce\xb3\x67\x2d\x3a\x9c\x55\xea\x98\xab\x80\x34\x1e\xb5\x93\x2a\x4d\x93\x41\x63\xd4\x2f\x27\x8c\x66\x7a\xf7\x1a\xa9\x5a\xa3\x9b\xbf\x65\x33\xb3\xda\x6c\x5d\x45\x3f\x9e\x35\x82\x7c\x2c\x4a\x59\xb8\x54\x42\x9f\x3f\x4f\xef\xd6\x88\x51\x5a\xfc\xae\x25\xdc\xb3\x11\x12\x39\x30\x61\x3b\xce\xb7\x7c\xa0\x07\x3a\xa3\x9c\x7f\xf8\x25\x97\x6c\x9c\x21\x57\x7c\x4f\x74\x11\xc5\x28\xe7\xe1\xf1\xde\x31\x8b\xa7\x2e\x45\x33\xae\x0d\x4f\x7a\x15\x9b\xcb\x30\x67\xf4\x0b\x8e\x67\xa7\x1f\xe7\xa5\x14\xe5\x77\xb4\x36\x9d\xaa\xc4\x71\x35\x47\xda\x67\x22\x85\xed\xcb\x0b\x8c\x21\xa7\xb3\xf2\x33\x4b\x38\xe9\x8a\x63\xc1\x4c\xdf\xeb\x02\x17\x31\x38\x71\x2c\x0f\xb7\xdf\x7c\xc7\x54\xfd\x0b\x76\x64\xd7\x5e\x13\x13\xf1\x12\x71\xc7\x52\x18\x25\x20\x99\xac\x21\xfb\xb3\x8e\x4b\x44\x87\xac\x0f\xc9\xb8\xda\x5f\xb5\xc4\xd2\xe1\x44\x6b\xad\x65\x6c\xe9\xaa\xd0\xba\xe2\x46\xfa\xf1\xda\x14\x86\x53\xa4\xa3\xd3\xad\xbd\xeb\xde\x90\xac\x6f\x2a\xd2\x1f\xa2\x11\x30\x9f\xa6\x4e\x62\x2d\x73\xbc\x80\x15\xef\x1e\x12\x10\x6f\xb4\xf7\x6e\x33\x11\xc8\x3a\x9a\xb7\x8b\x9c\x64\x39\xb9\x60\x3e\x4d\x72\xd9\x02\x4c\x18\x5c\xe9\x45\xcf\x81\x1f\x22\xda\x31\x05\xc4\x0e\x06\xc4\x27\x1c\xb4\x10\x96\x30\xa7\xb3\xb7\xe8\x86\x83\x61\x50\x6d\xc7\x51\xfc\x4c\x98\x5a\xb4\x56\x21\x06\x03\x86\x8b\xba\x4e\x44\xd4\x6e\xf1\xff\x6e\x61\x81\x9d\xde\xed\x32\x3d\x8d\x45\x6f\x73\x7e\x69\xd6\x0a\xfe\x24\xd9\xb5\x00\x88\xf9\xb7\x8b\x11\xa5\x83\x69\x7e\x54\x23\xa9\x0b\xb9\x06\xdf\xc6\xb6\x11\x5c\x28\xea\x66\x1c\xab\xce\xaf\xe7\xa5\x43\x54\x40\x11\xc4\x8e\x47\x5f\xfe\x79\xd0\x72\x6d\xdf\x84\x60\x55\x24\x04\x45\xb3\xbd\x91\x3e\xcf\xa3\xa2\xf8\xd1\xb7\xda\x67\xef\x2e\x31\xbf\xb1\x4c\x34\x42\x83\x0d\x65\xeb\x12\xe2\xfd\xd2\xd4\x85\xd1\x94\x21\x53\xa3\xfd\x49\xa6\xd8\xf5\xb7\xf6\xab\x6b\x71\x83\x41\x82\xd0\x8d\xa0\xbc\xe2\x1c\x1b\x6c\xc3\xdc\xad\xba\xbf\xf5\x71\x95\xa9\xf1\x62\xf6\x3f\x72\x94\x18\x50\x29\x5c\xd7\xd6\x27\x6c\xa7\x52\x84\xd1\x8c\x40\xe8\x8d\x3b\xe3\xdc\xed\x95\x76\xd1\x5b\xe9\x9d\x4c\xc4\xb3\x77\x2a\xd5\x48\x9e\x65\x5e\x4d\x61\x1c\xff\x8e\xce\x04\x72\x76\xdb\x13\xa5\xa3\x29\x2c\xa8\x69\x7b\x2a\xdf\xdd\xf6\x0e\x5a\xc4\x49\xa5\xea\x94\x25\x97\x33\x2b\x68\x6c\xf5\x8d\xad\xd1\xa4\x58\x32\x2a\x36\x9f\x0b\x60\xd7\x1d\x7d\x74\x1e\x77\x51\x5a\xfe\x81\xae\x83\xe1\xb7\x47\xa9\x6d\xc1\xcd\xbe\xba\x1d\xa5\x96\x02\x58\xd1\x39\x5e\x07\xc6\x6b\x66\xb1\xbc\x01\x23\x0b\x05\x6a\xb5\xd6\xd8\x2a\x8f\x13\x6d\x32\x0f\x43\x87\xf5\x66\xa9\xe3\x74\x4d\x7a\xb3\xc4\x1d\xfe\x2a\xa0\x47\x34\xcf\x23\x97\xe4\x4f\xab\x3d\x9d\xa1\x0c\xbd\xab\xf9\x69\xda\xc4\x48\xf9\x2c\x1f\x38\x94\x0e\x41\x3f\x86\xdc\x7b\x73\xdf\x70\xfb\xb4\x86\xd8\xfe\x85\x1b\x09\x93\x9d\x5d\x52\xf1\x4a\x96\x85\xd0\xe4\x2d\x24\x65\xac\xae\x36\xdc\xf6\x5c\x22\x8d\x64\xb1\x4f\x58\xe0\x20\xc4\xa8\xf5\xf0\x04\xec\xbe\x3a\xe0\x7d\xb5\x1e\xaf\x7e\x93\x24\x0c\xab\x9a\x57\x53\x5c\xbc\x72\xe0\x0a\x12\xb5\x80\x09\x7f\xb2\x0a\x64\x3e\xb3\x2d\x27\x85\x98\x3d\xf0\xd5\xf7\xf0\x20\x76\xee\xba\x28\x81\xda\x42\xf2\x5d\x57\xf2\xee\x17\x14\x66\x2a\x91\xff\x91\x6e\x5e\xe1\x1a\xf3\x5c\xd5\xf5\xb0\xed\x51\x3c\x4d\x2b\x5d\xe5\x55\x88\x00\xab\x79\x8b\xcf\x49\xee\xe8\xb7\xc1\x88\x8c\x33\xef\x5b\x6f\x9c\x7d\x48\xe3\x22\xb7\x1a\x6a\x97\x2a\xb5\x5d\x57\xeb\x91\xe8\xd7\x25\x3c\xb9\x50\x68\xfc\x2e\x7c\xfd\x5c\xfe\xde\x62\x5c\xee\xdf\x96\x2b\x28\x7a\x92\xb8\xb2\xfe\x82\xb2\x6d\xaf\x6b\x49\xd4\x4b\x46\xf2\xc2\x8a\xbe\x1c\xc3\xb6\x52\x35\x57\x40\xd1\x7b\xd2\x42\x1a\x9d\x10\xf3\x59\x96\xac\x1a\x6d\xc5\x09\xfb\x7a\xc0\xba\x36\x69\xfe\x4f\x12\xd2\x2f\x28\x61\x85\xc3\x5f\xd7\x76\xba\xb7\x6f\x60\xc9\x0d\x48\x7f\x4d\x62\xd5\x13\xc6\x86\x95\x6b\xb4\xb4\x4a\xfc\x76\xfe\x3d\x22\xf3\xa5\x20\xae\x3e\xa9\xb8\xd1\xf0\x6b\xe1\x22\x14\xfb\xc5\x3f\x6f\xa3\xcc\xa9\x63\x5b\x36\x45\x2a\x67\x4b\x70\xf5\xf2\x7e\xe3\x4e\x51\xa6\xad\xb4\x8b\x59\xf0\xa2\x71\xd5\x97\x77\xf6\x8e\xc5\x90\xee\x38\xe6\xb9\xb2\x26\xbe\x0b\xb6\x62\x01\x57\xd9\xf4\x85\xb0\xd4\x8f\xf8\x38\xfc\x88\x0b\xe8\x2e\xf7\x59\xeb\xf7\x32\x04\xd2\x75\xb9\x46\x45\xf6\x6c\x31\xcb\x8b\x85\x35\x51\x1e\x9f\x21\xe4\xd2\x7f\xef\x2b\x86\x8d\xbc\x06\x8d\x75\x9d\x35\xdc\x2f\x80\xc9\x78\x9f\x9b\x66\x4c\x81\xe4\x29\xdd\x88\xc2\xf6\xc3\x36\x3b\xce\xf5\x2c\xcb\xa5\x04\xe4\xd9\xd4\xc6\xfd\x21\xcf\x71\xeb\xa3\x82\x0d\x36\xbe\x6b\x92\xf2\x70\xdd\x99\xbf\xb9\xa6\xef\xde\xd3\x2c\x65\x32\xf8\x60\xf3\x7d\x1a\x8d\x9e\xeb\x9d\x6a\x1e\xbd\x92\x63\xbf\xc5\x7e\x9f\x61\x24\x9a\x44\x86\xaa\xa6\xc8\xbd\x45\x24\x46\xab\x75\x9b\xdc\xbe\xee\xd2\xff\x70\x82\xf5\x86\xe9\x33\xdf\xa7\xad\x1f\xae\x3a\xec\x13\x1c\x35\x7e\x98\x7d\xa8\x14\xc3\xa6\x66\x1f\x4c\x48\x72\x1f\x9d\x64\x9d\xa7\xa5\x10\x76\xb0\x59\xd9\xbe\x1a\x75\x6b\x62\x25\x44\x0b\x1b\xab\x1b\xaa\x2f\x7f\xdb\x1b\xb6\x24\x8f\xf8\xc5\x74\x72\xef\x84\x04\x3c\x9c\x99\xfb\xa3\x11\xd1\x48\x7a\x18\x1f\x1f\x21\xb6\x6c\x27\xf2\x77\xb9\x2a\x8c\x5e\x97\xec\xd8\x36\xcf\x3b\xb3\xf4\xb9\x69\x0f\x95\x31\x44\xf0\x4f\xb7\xa4\x86\xa9\x40\xd1\x63\x5a\x86\x35\xee\xdc\x91\x7e\xe5\x7b\x1c\xdd\x87\xb1\xff\x46\xab\x5c\x87\x74\x9f\x69\x52\x6b\x19\x38\x62\x72\xfc\xd3\xc1\x36\xec\x73\x4d\x35\x66\x73\xeb\x7c\x88\xdd\xfd\xad\x1e\x5b\x98\xb4\x38\x32\xec\xcd\xcf\xa7\xa5\x61\x0e\x6e\xac\x41\x88\x1b\x72\x93\x7d\xab\x08\x82\x41\xa9\x61\xb8\xfd\xef\x50\x8d\xb6\x9a\x43\x08\x42\x42\x78\x92\xfa\x43\x8a\xf0\x2c\xf9\x02\xe1\x99\x49\x5d\x42\x18\x24\x66\x84\x03\xe0\xc5\xee\x7e\xef\x81\xc4\x8c\x60\xff\x7b\x31\x43\xf0\x2d\xc2\x3a\x62\xbe\xb5\x0b\x00\x2f\xa6\x06\x8c\xe1\xe3\x41\x3e\x20\x4f\x16\xf1\xbf\xd0\x90\x1f\xe6\xc9\x60\xa1\xc6\x67\xf9\xe0\xb3\x35\x55\x0d\x56\x3d\xbf\x90\x94\xd4\xad\x50\x89\x7a\xd8\x92\xcb\xbe\x62\x58\xd7\xcf\xa7\xd3\xc1\xf5\x30\x2f\xd0\x3d\xad\xec\x1e\xff\x93\xfe\x11\x73\xb2\x4d\x42\xd9\xb4\xfd\x3a\x29\xf0\x7f\x03\xc3\x5a\xad\x19\xe9\x14\x7f\xa6\xae\xaa\xbe\x8b\x0f\xbd\x4f\x5d\x05\xe4\x7c\xbf\x4f\xe5\xb5\xbe\xde\x11\x3a\xd9\xc1\x1c\x60\xc2\xaa\x4b\x29\xe4\x11\xdf\x9c\xd5\xc4\x75\x28\xf0\xd9\xe1\xa8\x4f\xdb\xe3\xb3\x42\x03\x54\x28\x1d\xe5\xaa\x63\x13\xa9\xdb\xa0\x6d\x89\x06\xa8\x65\x8b\xae\x5b\xb3\x22\x36\xdb\x12\xee\x7d\xff\xa9\x4d\xad\x47\xa6\x76\xf1\xa4\x7f\xac\x85\x76\x09\x3f\xb8\xee\xdf\xac\x37\x13\x57\x60\x34\x28\x0e\x07\x64\xf1\xaa\xfc\xa1\x72\x51\x80\xad\xb3\x17\x1b\xad\x8e\x83\x02\x4a\xdc\x9a\xa8\x9f\x04\x1c\x90\xcb\x2d\xe0\xbb\x65\x79\x00\x14\x5f\x54\x81\xd3\xe2\xa0\xc0\x51\x22\x15\xa7\x56\x2a\x0a\xb0\x25\xdd\x89\xb8\xfa\x3c\x00\x26\xfe\x5f\x4c\x1c\x5f\x38\x35\x77\xda\x6e\xf3\xc6\x07\x79\x00\x00\xd0\xbb\x7e\x13\x5f\x81\xbb\xfb\xef\x7f\x05\x00\x00\xff\xff\x93\xe1\xe1\x76\x8a\x13\x00\x00")

func idsPngBytes() ([]byte, error) {
	return bindataRead(
		_idsPng,
		"ids.png",
	)
}

func idsPng() (*asset, error) {
	bytes, err := idsPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ids.png", size: 5002, mode: os.FileMode(438), modTime: time.Unix(1730693786, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ids.png": idsPng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ids.png": &bintree{idsPng, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
